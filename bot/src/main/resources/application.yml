app:
  telegram-token: ${TELEGRAM_TOKEN}
  scrapper-url: http://127.0.0.1:8080
  topic-name: "my-topic"
  use-queue: true

spring:
  application:
    name: bot
  jackson:
    time-zone: UTC
  config:
    import: optional:file:.env[.properties]
  cache:
    cache-names:
      - rate-limit-buckets
    caffeine:
      spec: maximumSize=100000,expireAfterAccess=3600s

  kafka:
    consumer:
      bootstrap-servers: localhost:29092
      group-id: bot
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.value.default.type: edu.java.LinkUpdateRequest
    producer:
      bootstrap-servers: localhost:29092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    bootstrap-servers: localhost:29092

management:
  metrics:
    tags:
      application: ${spring.application.name}
  server:
    port: 8091
  endpoints:
    web:
      base-path: /
      exposure:
        include: health, info, prometheus
      path-mapping:
        prometheus: metrics

retry-config:
  retries:
    - client: scrapper
      type: linear
      max-attempts: 1
      step: 2
      delay: 2s
      codes:
        - 500

bucket4j:
  enabled: true
  filters:
    - cache-name: rate-limit-buckets
      url: .*
      http-status-code: TOO_MANY_REQUESTS
      rate-limits:
        - cache-key: getRemoteAddr()
          bandwidths:
            - capacity: 100
              time: 1
              unit: minutes
server:
  port: 8090

springdoc:
  swagger-ui:
    path: /swagger-ui



logging:
  config: classpath:log4j2-plain.xml
